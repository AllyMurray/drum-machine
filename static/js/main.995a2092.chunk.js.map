{"version":3,"sources":["serviceWorker.ts","utils/cssVariables.ts","components/Display.tsx","components/DrumPad.tsx","drumPads.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","colors","border","DisplayContainer","styled","div","Display","props","id","style","text","Button","button","DrumPad","audioElement","useRef","handlePlaySoundCallback","useCallback","current","play","onChange","handleKeyDownCallback","e","keyCode","useEffect","document","addEventListener","removeEventListener","keyText","String","fromCharCode","className","onClick","onKeyDown","src","url","ref","drumPads","AppContainer","DrumContainer","DrumPads","App","useState","displayText","setDisplayText","gridColumn","map","drumPad","key","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CClBOC,EAEG,UAFHA,EAGF,UAHEA,EAIH,UAJGA,EAOA,OAPAA,EAQF,UAGEC,GACH,aAAD,OAAeD,GACP,O,sSCHjB,IAAME,EAAmBC,IAAOC,IAAV,IAEAJ,EACHA,EACSC,EACCA,EAClBD,GAcIK,EARyC,SAAAC,GACtD,OACE,kBAACJ,EAAD,CAAkBK,GAAG,UAAUC,MAAOF,EAAME,OACzCF,EAAMG,O,kNCbb,IAAMC,EAASP,IAAOQ,OAAV,IACUX,EACHC,EACRD,GAqDIY,EA5CyC,SAAAN,GACtD,IAAMO,EAAeC,iBAAyB,MAExCC,EAA0BC,uBAAY,YAC1C,OAAIH,QAAJ,IAAIA,OAAJ,EAAIA,EAAcI,WAChBJ,EAAaI,QAAQC,OACrBZ,EAAMa,SAASN,EAAaI,QAAQV,OAErC,CAACD,IAEEc,EAAwBJ,uBAC5B,SAAAK,GACMA,EAAEC,UAAYhB,EAAMgB,SACtBP,MAGJ,CAACT,EAAMgB,QAASP,IAGlBQ,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,UAAWL,GAE9B,WACLI,SAASE,oBAAoB,UAAWN,OAI5C,IAAMO,EAAUC,OAAOC,aAAavB,EAAMgB,SAE1C,OACE,kBAACZ,EAAD,CACEH,GAAID,EAAMC,GACVuB,UAAU,WACVC,QAAShB,EACTiB,UAAW,SAACX,GAAD,OACTD,EAAsBC,KAGvBM,EACD,2BAAOpB,GAAIoB,EAASG,UAAU,OAAOG,IAAK3B,EAAM4B,IAAKC,IAAKtB,MCzDnDuB,EAAuB,CAClC,CACE7B,GAAI,WACJe,QAAS,GACTY,IAAK,4DAEP,CACE3B,GAAI,WACJe,QAAS,GACTY,IAAK,4DAEP,CACE3B,GAAI,WACJe,QAAS,GACTY,IAAK,4DAEP,CACE3B,GAAI,WACJe,QAAS,GACTY,IAAK,8DAEP,CACE3B,GAAI,OACJe,QAAS,GACTY,IAAK,4DAEP,CACE3B,GAAI,UACJe,QAAS,GACTY,IAAK,0DAEP,CACE3B,GAAI,cACJe,QAAS,GACTY,IAAK,8DAEP,CACE3B,GAAI,OACJe,QAAS,GACTY,IAAK,8DAEP,CACE3B,GAAI,YACJe,QAAS,GACTY,IAAK,2D,6gBCxCT,IAAMG,EAAelC,IAAOC,IAAV,KAQZkC,EAAgBnC,IAAOC,IAAV,IACGJ,EACHC,GAIbsC,EAAWpC,IAAOC,IAAV,KA8BCoC,MAvBf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,KAGb,OACE,kBAACN,EAAD,CAAc9B,GAAG,eAAeuB,UAAU,OACxC,kBAACQ,EAAD,KACE,kBAAC,EAAD,CAAS7B,KAAMiC,EAAalC,MAAO,CAAEoC,WAAY,YACjD,kBAACL,EAAD,KACGH,EAASS,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAD,CACEC,IAAKD,EAAQvC,GACbA,GAAIuC,EAAQvC,GACZe,QAASwB,EAAQxB,QACjBY,IAAKY,EAAQZ,IACbf,SAAUwB,W,cCrCxBK,EAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SNmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.995a2092.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const colors = {\r\n  darkPrimary: \"#616161\",\r\n  lightPrimary: \"#F5F5F5\",\r\n  primary: \"#9E9E9E\",\r\n  accent: \"#536DFE\",\r\n  primaryText: \"#212121\",\r\n  secondaryText: \"#757575\",\r\n  lightText: \"#FFF\",\r\n  divider: \"#BDBDBD\"\r\n};\r\n\r\nexport const border = {\r\n  default: `1px solid ${colors.divider}`,\r\n  defaultRadius: \"4px\"\r\n};\r\n","import React, { CSSProperties } from \"react\";\r\nimport { border, colors } from \"../utils/cssVariables\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\ninterface IDisplayProps {\r\n  text: string;\r\n  style?: CSSProperties;\r\n}\r\n\r\nconst DisplayContainer = styled.div`\r\n  align-items: center;\r\n  background-color: ${colors.primary};\r\n  border-bottom: ${colors.divider};\r\n  border-top-left-radius: ${border.defaultRadius};\r\n  border-top-right-radius: ${border.defaultRadius};\r\n  color: ${colors.lightText};\r\n  display: flex;\r\n  height: 3rem;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Display: React.FunctionComponent<IDisplayProps> = props => {\r\n  return (\r\n    <DisplayContainer id=\"display\" style={props.style}>\r\n      {props.text}\r\n    </DisplayContainer>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React, { useCallback, useEffect, useRef } from \"react\";\r\nimport { border, colors } from \"../utils/cssVariables\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\ninterface IDumpPadProps {\r\n  id: string;\r\n  keyCode: number;\r\n  url: string;\r\n  onChange: (text: string) => void;\r\n}\r\n\r\nconst Button = styled.button`\r\n  background-color: ${colors.accent};\r\n  border-radius: ${border.defaultRadius};\r\n  color: ${colors.lightText};\r\n  height: 4rem;\r\n  width: 4rem;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst DrumPad: React.FunctionComponent<IDumpPadProps> = props => {\r\n  const audioElement = useRef<HTMLAudioElement>(null);\r\n\r\n  const handlePlaySoundCallback = useCallback(() => {\r\n    if (audioElement?.current) {\r\n      audioElement.current.play();\r\n      props.onChange(audioElement.current.id);\r\n    }\r\n  }, [props]);\r\n\r\n  const handleKeyDownCallback = useCallback(\r\n    e => {\r\n      if (e.keyCode === props.keyCode) {\r\n        handlePlaySoundCallback();\r\n      }\r\n    },\r\n    [props.keyCode, handlePlaySoundCallback]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyDownCallback);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDownCallback);\r\n    };\r\n  });\r\n\r\n  const keyText = String.fromCharCode(props.keyCode);\r\n\r\n  return (\r\n    <Button\r\n      id={props.id}\r\n      className=\"drum-pad\"\r\n      onClick={handlePlaySoundCallback}\r\n      onKeyDown={(e: React.KeyboardEvent<HTMLButtonElement>) =>\r\n        handleKeyDownCallback(e)\r\n      }\r\n    >\r\n      {keyText}\r\n      <audio id={keyText} className=\"clip\" src={props.url} ref={audioElement} />\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default DrumPad;\r\n","interface IDrumPad {\r\n  id: string;\r\n  keyCode: number;\r\n  url: string;\r\n}\r\n\r\nexport const drumPads: IDrumPad[] = [\r\n  {\r\n    id: \"Heater-1\",\r\n    keyCode: 81,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\r\n  },\r\n  {\r\n    id: \"Heater-2\",\r\n    keyCode: 87,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\r\n  },\r\n  {\r\n    id: \"Heater-3\",\r\n    keyCode: 69,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\r\n  },\r\n  {\r\n    id: \"Heater-4\",\r\n    keyCode: 65,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\r\n  },\r\n  {\r\n    id: \"Clap\",\r\n    keyCode: 83,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\r\n  },\r\n  {\r\n    id: \"Open-HH\",\r\n    keyCode: 68,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\r\n  },\r\n  {\r\n    id: \"Kick-n'-Hat\",\r\n    keyCode: 90,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\r\n  },\r\n  {\r\n    id: \"Kick\",\r\n    keyCode: 88,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\r\n  },\r\n  {\r\n    id: \"Closed-HH\",\r\n    keyCode: 67,\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\r\n  }\r\n];\r\n","import \"./App.css\";\n\nimport React, { useState } from \"react\";\nimport { border, colors } from \"./utils/cssVariables\";\n\nimport Display from \"./components/Display\";\nimport DrumPad from \"./components/DrumPad\";\nimport { drumPads } from \"./drumPads\";\nimport styled from \"styled-components\";\n\nconst AppContainer = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  justify-content: center;\n`;\n\nconst DrumContainer = styled.div`\n  background-color: ${colors.lightPrimary};\n  border-radius: ${border.defaultRadius};\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 6px 0px;\n`;\n\nconst DrumPads = styled.div`\n  display: grid;\n  grid-gap: 8px;\n  grid-template-columns: repeat(3, 4rem);\n  padding: 1rem;\n`;\n\nfunction App() {\n  const [displayText, setDisplayText] = useState(\"\");\n\n  return (\n    <AppContainer id=\"drum-machine\" className=\"App\">\n      <DrumContainer>\n        <Display text={displayText} style={{ gridColumn: \"span 3\" }} />\n        <DrumPads>\n          {drumPads.map(drumPad => (\n            <DrumPad\n              key={drumPad.id}\n              id={drumPad.id}\n              keyCode={drumPad.keyCode}\n              url={drumPad.url}\n              onChange={setDisplayText}\n            />\n          ))}\n        </DrumPads>\n      </DrumContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}